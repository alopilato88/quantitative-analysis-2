---
title: "Assignment 2: Fun with R"
editor_options: 
  chunk_output_type: console
---

## Problem 1.

Please load the following packages: `tibble`, `dplyr`, `readr`, and `tidyr`.

```{r}
# I have started by loading the tibble package. You will need to load the 
# remaining.
library(tibble)

```

## Problem 2. 

Run the code in the code chunk below to simulate some random data. 

```{r}
set.seed(1)

n <- 100

data_random <- 
  tibble::tibble(
    x_norm = rnorm(n),
    y_binom = rbinom(n, size = 1, prob = .65)
  )

# This will write the csv file, "data_random.csv" to the directory your R session is currently pointed to. To find this directory you can use getwd(). This will print the name of the directory your R session is currenlty pointed to. 
readr::write_csv(data_random, "data_random.csv")
```

## Problem 3. 

Read in the dataset you just generated using the `readr` pacakge. If you do not know which function to use in the `readr` package to read in your data, then navigate to the R terminal window and type `readr::`. That will open a drop down list on your terminal window that contains all of the functions included in `readr`. Find the one you need and finish the code in the code chunk below.

```{r}
data_random_1 <- readr::
```

## Problem 4. 

Run the code in the code chunk below to see how the `mutate` function adds a new variable to your data frame.

```{r}
data_random_1 <- 
  data_random_1 |> # This the pipe function -- it sends the output of line 51 into the function on line 52
  dplyr::mutate(
    y_binom_reverse = 1 - y_binom # Notice you can refer to columns already in your data frame
  )
```

## Problem 5. 

Use the `mutate` function to add a new column to `data_random_1`. Call this column `y_binom_plus_1` and set it equal to `y_binom` + 1. 

```{r}

```

## Problem 6. 

Finish the code below, so that it filters your data frame to contain only rows where `y_binom == 0`. If you get stuck, then try writing `?dplyr::filter` into your R terminal. It will return detailed information on how to use the `filter` function.  

```{r}
data_random_2 <- 
  data_random_1 |>
  dplyr::filter(
    # Add code here
  )
```

## Problem 7.

Finish the code below to use the `select` function to select `x_norm` and `y_binom_reverse` from the data frame: `data_random_2`.

```{r}
data_random_2 |>
  dplyr::select(
    # Finish the code
  )
```

## Problem 8. 

Run the code in the code chunk below to create two Starwars datasets.

```{r}
starwars_char_demographics <- 
  dplyr::starwars |>
  dplyr::select(
    name:gender
  )

starwars_homeworld <- 
  dplyr::starwars |>
  dplyr::select(
    name, homeworld
  )
```

Now finish the code below to join the two data frames together using `name` as the variable to join on. 

```{r}
starwars <- 
  starwars_char_demographics |>
  dplyr::left_join(
    # Finish code here
  )
```

## Problem 9. 

Now we are going to test out different join functions: `left_join`, `right_join`, `full_join`, and `inner_join`. Begin by running the code chunk below.

```{r}
set.seed(454)

starwars_char_demographics_miss <-
  starwars_char_demographics |>
  dplyr::slice_sample(n = 20) # This function randomly selects 20 rows

starwars_homeworld_miss <-
  starwars_homeworld |>
  dplyr::slice_sample(n = 40)
```

Now we are going to join `starwars_char_demographics_miss` and `starwars_homeworld_miss` using different join functions. After you have finished the code below, in your own words, write how you think the functions differ from one another. 

```{r}
starwars_char_demographics_miss |> 
  dplyr::left_join(
    # Finish this code
  )

starwars_char_demographics_miss |>
  dplyr::right_join(
    # Finish this code
  )

starwars_char_demographics_miss |>
  dplyr::full_join(
    # Finish this code
  )

starwars_char_demographics_miss |>
  dplyr::inner_join(
    # Finish this code
  )


```

## Problem 10. 

Run the code below to learn how the `summarize` function works. 

```{r}
set.seed(453)

data_random_summ <- 
  tibble::tibble(
    x = rnorm(100),
    y = rpois(100, 5)
  )

data_summ <- 
  data_random_summ |>
  dplyr::summarize(
    mean_x = mean(x),
    sd_x = sd(x),
    number_obs = dplyr::n(),
    .by = y
  )

data_summ
```

Now using the `starwars` dataset, calculate the mean and standard deviation of `birth_year` by `species`. Name the new data frame: `starwars_age_summary`.

```{r}
starwars <- dplyr::starwars

# Start code here 
```

## Problem 11.

Similar to `Problem 10`, create a summary data frame that contains the mean and standard deviation of `birth_year`, but summarize it by both `species` and `homeworld`. Save the summary in a data frame named: `starwars_species_homeworld_summ`.

```{r}

```

## Problem 12.

Using the `summarize` function, finish the code below to determine what proportion of the characters in the `starwars` data frame are form a given `homeworld`. Then add the `arrange` function at the end of the code to sort the data frame by the proportions. 

```{r}
starwars |>
  dplyr::summarize(
    count = dplyr::n(),
    .by = homeworld
  ) |>
  dplyr::mutate(
    total = sum(count),
    prop = # Finish code
  ) # Add arrange function after this line
```

